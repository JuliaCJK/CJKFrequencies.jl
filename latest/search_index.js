var documenterSearchIndex = {"docs":
[{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"A character frequency can be computed or loaded via the charfreq function, either from some text or a predefined corpus.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"charfreq","category":"page"},{"location":"api_reference/#CJKFrequencies.charfreq","page":"API Reference","title":"CJKFrequencies.charfreq","text":"charfreq(text)\ncharfreq(charfreq_type)\n\nCreate a character frequency mapping from either text or load it from a default location for pre-specified character frequency datasets (e.g. SimplifiedLCMC, SimplifiedJunDa, etc.).\n\nExamples\n\nWhen creating a character frequency from text, this method behaves almost exactly like DataStructures.counter except that the return value always has type CharacterFrequency (Accumulator{String, Int}).\n\njulia> text = split(\"王老师性格内向，沉默寡言，我除在课外活动小组“文学研究会”听过他一次报告，并听-邓知识渊博，是“老师的老师”外，对他一无所知。所以，研读他的作\",\"\");\n\njulia> charfreq(text)\nDataStructures.Accumulator{String,Int64} with 51 entries:\n  \"除… => 1\n  \"报… => 1\n  \"是… => 1\n  \"知… => 2\n  \"性… => 1\n  \"外… => 2\n  \"识… => 1\n  \"对… => 1\n  ⋮   => ⋮\n\nSee the documentation for individual character frequency dataset structs for examples of the second case.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Supported-Predefined-Character-Frequency-Datasets","page":"API Reference","title":"Supported Predefined Character Frequency Datasets","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"A Chinese character frequency dataset's struct's name will be prefixed with either Traditional or Simplified depending on whether it is based on a traditional or simplified text corpus.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"SimplifiedLCMC\nSimplifiedJunDa","category":"page"},{"location":"api_reference/#CJKFrequencies.SimplifiedLCMC","page":"API Reference","title":"CJKFrequencies.SimplifiedLCMC","text":"A character frequency dataset: Lancaster Corpus for Mandarin Chinese, simplified terms only, based on simplified text corpus. See their website for more details about the corpus.\n\nThe character frequency can be based only on selected categories (see CJKFrequencies.LCMC_CATEGORIES for valid  category keys and corresponding category names). Any incorrect categories will be ignored.\n\nExamples\n\nLoading all the categories:\n\njulia> charfreq(SimplifiedLCMC())\nDataStructures.Accumulator{String,Int64} with 45411 entries:\n  \"一路…   => 1\n  \"舍得\"   => 9\n  \"５８\"   => 1\n  \"神农…   => 1\n  \"十点\"   => 8\n  \"随从\"   => 9\n  \"荡心…   => 1\n  \"尺码\"   => 1\n  ⋮      => ⋮\n\nOr loading just a subset (argument can be any iterable):\n\njulia> charfreq(SimplifiedLCMC(\"ABEGKLMNR\"))\nDataStructures.Accumulator{String,Int64} with 35488 entries:\n  \"废…  => 1\n  \"蜷\"  => 1\n  \"哇\"  => 13\n  \"丰…  => 1\n  \"弊…  => 3\n  \"议…  => 10\n  \"滴\"  => 28\n  \"美…  => 1\n  ⋮    => ⋮\n\nLicensing/Copyright\n\nThis corpus is provided primarily for non-profit-making research. Be sure to see the full end user license agreement.\n\nVia the Oxford Text Archive, this corpus is distributed under the CC BY-NC-SA 3.0 license.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#CJKFrequencies.SimplifiedJunDa","page":"API Reference","title":"CJKFrequencies.SimplifiedJunDa","text":"A character frequency dataset  of modern Chinese compiled by Jun Da, simplified single-character words only.\n\nCurrently, only the modern Chinese dataset is fetched; however, in the future, the other lists may also be provided as an option.\n\nExamples\n\njulia> charfreq(SimplifiedJunDa())\nDataStructures.Accumulator{String,Int64} with 9932 entries:\n  \"蜷… => 837\n  \"哇… => 4055\n  \"湓… => 62\n  \"滴… => 8104\n  \"堞… => 74\n  \"狭… => 6901\n  \"尚… => 38376\n  \"懈… => 2893\n  ⋮   => ⋮\n\nLicensing/Copyright\n\nThe original author maintains full copyright to the character frequency lists, but provides the lists for research and taeching/learning purposes only, no commercial use without permission from  the author. See their full disclaimer and copyright notice here.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Other data sets are planned to be added. To add a data set to this API, see the Developer Docs page.","category":"page"},{"location":"#CJKFrequencies.jl-Documentation","page":"Home","title":"CJKFrequencies.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package primarily provides the function charfreq for computing and loading character frequencies of CJK-like languages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that while the source code for this package is MIT-licensed, some of the character frequency datasets are not. The licensing/copyright information for each dataset is listed under the respective struct on Supported Predefined Character Frequency Datasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"devdocs/#Developer-Docs","page":"Developer Docs","title":"Developer Docs","text":"","category":"section"},{"location":"devdocs/","page":"Developer Docs","title":"Developer Docs","text":"To add a new character frequency dataset using this API, a method just needs to be added to the charfreq function. It should have the signature","category":"page"},{"location":"devdocs/","page":"Developer Docs","title":"Developer Docs","text":"function charfreq(cf::CustomDataSetStruct)::CharacterFrequency end","category":"page"},{"location":"devdocs/","page":"Developer Docs","title":"Developer Docs","text":"where the CustomDataSetStruct is any struct that you define for that particular character frequency data set. If needed, the constructor for the struct should take any arguments (e.g. see SimplifiedLCMC for an example with arguments).","category":"page"},{"location":"devdocs/","page":"Developer Docs","title":"Developer Docs","text":"The return value should have type CharacterFrequency (Accumulator{String, Int}).","category":"page"}]
}
